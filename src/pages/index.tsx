import Head from 'next/head'
import { useReducer, useCallback, useEffect } from 'react';
import Select, { SingleValue, MultiValue, ActionMeta, Props as SelectProps } from 'react-select'

const statesData = [
  {
    id: 0,
    name: "Texas",
    metros: [
      {
        id: 0,
        name: "Dallas"
      },
      {
        id: 1,
        name: "Houston"
      },
    ]
  },
  {
    id: 1,
    name: "Louisiana",
    metros: [
      {
        id: 2,
        name: "Bossier"
      },
      {
        id: 3,
        name: "Haughton"
      },
    ]
  }
]

interface Option
{
  value: number,
  label: string
}

interface FilterState
{
  states: StateData[],
  stateOptions: Option[],
  metroOptions?: Option[],
  selectedStateOption?: Option | null,
  selectedMetroOptions?: Option[],
  isLoading: boolean
}

interface FilterStateAction
{
  type: FilterStateActionKind,
  payload?: any
}

enum FilterStateActionKind
{
  LOAD,
  CHANGE_STATE,
  CHANGE_METRO,
  RESET
}

interface StateData
{
  id: number,
  name: string,
  metros: MetroData[]
}

interface MetroData
{
  id: number,
  name: string,
}



const getMetroOptions = (states: StateData[], stateId?: number) : Option[] => {
  const state = states.find(x => x.id === stateId);

  if (!state) {
    return []
  }

  return state.metros.map(x => ({ value: x.id, label: x.name }));  
}

const getInitialState = (): FilterState => ({
  states: [],
  stateOptions: [],
  metroOptions: [],
  selectedStateOption: null,
  selectedMetroOptions: [],
  isLoading: true,
})

const reducer = (state: FilterState, action: FilterStateAction): FilterState => {
  console.log(action.type)
  switch (action.type) {
    case FilterStateActionKind.LOAD:
      return {
        ...state,
        ...action.payload,
      }
    case FilterStateActionKind.CHANGE_STATE:
      return { 
        ...state,
        selectedStateOption: action.payload.stateOption,
        metroOptions: action.payload.metroOptions,
        selectedMetroOptions: []
      }
    case FilterStateActionKind.CHANGE_METRO:
      return { ...state, selectedMetroOptions: action.payload };
    case FilterStateActionKind.RESET:
      return { ...state, selectedStateOption: null, selectedMetroOptions: [], metroOptions: [] }
    default:
      return state;
  }
};

export default function Home() {
  const [state, dispatch] = useReducer(reducer, getInitialState());
 
  useEffect(() => {
    const payload : FilterState = {
      isLoading: false,
      states: statesData,
      stateOptions: statesData.map((state : StateData) => ({ value: state.id, label: state.name })),
    }

    //payload.selectedStateOption = undefined; // load from prefs
    payload.metroOptions = getMetroOptions(payload.states, payload.selectedStateOption?.value)

    dispatch({ type: FilterStateActionKind.LOAD, payload })
  }, []);

  const onStateSelectChanged = useCallback(
    (newValue: SingleValue<Option>, _actionMeta: ActionMeta<unknown>): void => {
      const payload = { 
        stateOption: newValue,
        metroOptions: getMetroOptions(state.states, newValue?.value)
      }

      dispatch({ type: FilterStateActionKind.CHANGE_STATE, payload })
    }, [state.states]
  );

  const onMetroSelectChanged = useCallback(
    (newValue: MultiValue<Option>, _actionMeta: ActionMeta<unknown>): void =>
      dispatch({ type: FilterStateActionKind.CHANGE_METRO, payload: newValue })
    , []
  );

  const onResetButtonClicked = useCallback(
    (e: React.MouseEvent<HTMLButtonElement>): void => {
      dispatch({ type: FilterStateActionKind.RESET })
    }, []
  )

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Select
          value={state.selectedStateOption}
          options={state.stateOptions}
          onChange={onStateSelectChanged}
          />
        <Select
          value={state.selectedMetroOptions}
          options={state.metroOptions}
          onChange={onMetroSelectChanged}
          isDisabled={!state.metroOptions?.length}
          isMulti
          isClearable
          />
        <button onClick={onResetButtonClicked}>Reset</button>
      </main>
    </>
  )
}
